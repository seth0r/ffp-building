# -*- python -*-
# ex: set filetype=python:

import re
from buildbot.plugins import util

c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None

c['title'] = "FFP-BuildBot"
c['titleURL'] = "http://freifunk-potsdam.de"
c['buildbotURL'] = "http://buildbot.freifunk-potsdam.de:8010/"
c['db_url'] = "sqlite:///state.sqlite"

c['protocols'] = {"pb": {"port":9989}}

# WORKERS
from workers import workers
c['workers'] = workers
workernames = []
for w in workers:
    workernames.append(w.workername)

# SCHEDULERS
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.schedulers.timed import Periodic

builder_names = [
    "ar71xx-generic",
#    "ar71xx-mikrotik",
#    "ath79-generic",
#    "mpc85xx-generic",
#    "ipq40xx-generic",
#    "ramips-mt7620",
#    "ramips-mt7621",
#    "ramips-mt76x8",
#    "x86-generic",
    ]

c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="potsdam githook",
        change_filter=filter.ChangeFilter(
            branch_re='.*',
            repository='https://github.com/freifunk-potsdam/firmware'
            ),
        treeStableTimer=10,
        builderNames=builder_names
    )
)

c['schedulers'].append(Periodic(
    name="weekly",
    branch="master",
    builderNames=builder_names,
    periodicBuildTimer=7*24*60*60
    )
)

# BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Interpolate, renderer
from buildbot.steps.worker import RemoveDirectory


def is_release_step(step):
    branch = step.build.getProperty("branch")
    return re.match("\d+\.\d+\.\d+$", branch)


cmd_checkoutSource = Git(
    repourl='git://github.com/freifunk-potsdam/firmware.git',
    branch="master",   # this can get changed by html.WebStatus.change_hook()
                       # by notification from GitHub of a commit
    workdir="build/firmware",
    mode='full'
    )

feed_conf_interpolate = Interpolate(
    "'s/\(packages_berlin\.git\^\)\([a-f0-9]\{40,40\}\)/\1%(prop:revision)s/'"
    ),

def repo_url(props):
    base_url = "http://buildbot.freifunk-potsdam.de/buildbot"
    branch = props.getProperty("branch")
    target = props.getProperty("buildername")
    is_release_branch = branch and re.match("\d+\.\d+\.\d+$", branch)
    if is_release_branch:
        return "{}/stable/{}/{}/packages".format(
            base_url,
            branch,
            target
            )
    else:
        return "{}/unstable/{}/{}/packages".format(
            base_url,
            target,
            props.getProperty("buildnumber")
            )


@renderer
def cmd_make_command(props):
    command = ['nice', 'make']
    cpus = props.getProperty('cpus_per_build')
    if cpus:
        command.extend(['-j', str(cpus+1)])
    else:
        command.extend(['-j', '2'])
    command.extend(["TARGET=" + props.getProperty('buildername')])
    command.extend(["VERSION_REPO=" + repo_url(props)])
    command.extend(['IS_BUILDBOT=yes'])
    return command


cmd_make = ShellCommand(
    command=cmd_make_command,
    workdir="build/firmware",
    haltOnFailure=True
    )

upload_directory = Interpolate(
    "/var/lib/buildbot/www/unstable/%(prop:buildername)s/%(prop:buildnumber)s/"
    )

cmd_mastermkdir = MasterShellCommand(
    command=[
        "mkdir",
        "-p",
        "--mode=a+rx",
        upload_directory
    ])

slave_src_directory = Interpolate(
    "firmware/firmwares/%(prop:buildername)s/"
)

cmd_uploadPackages = DirectoryUpload(
    workersrc=slave_src_directory,
    masterdest=upload_directory
    )

cmd_masterchmod = MasterShellCommand(
    command=[
        "chmod",
        "-R",
        "o+rX",
        upload_directory
    ])

cmd_cleanup = RemoveDirectory(
    dir="build/firmware",
    alwaysRun=True
    )

#cmd_rsync_release = MasterShellCommand(
#    command=[
#        "rsync",
#        "-av",
#        "--delete",
#        upload_directory,
#        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/%(prop:buildername)s")
#        ],
#    doStepIf=is_release_step
#    )

cmd_create_release_dir = MasterShellCommand(
    command=[
        "mkdir",
        "-m755",
        "-p",
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/")
        ],
    doStepIf=is_release_step
    )

factory = BuildFactory([
    cmd_checkoutSource,
    cmd_make,
#    cmd_mastermkdir,
#    cmd_uploadPackages,
#    cmd_masterchmod,
#    cmd_create_release_dir,
#    cmd_rsync_release,
#    cmd_cleanup
    ])


def create_builder_config(builder_name):
    return BuilderConfig(
        name=builder_name,
        workernames=workernames,
        factory=factory
    )


c['builders'] = list(map(create_builder_config, builder_names))

# STATUS TARGETS

c['www'] = {
    'port':8010,
    'plugins':{
        'waterfall_view':{},
        'console_view':{}
    },
    'change_hook_dialects':{
        'github': True
    },
    'auth': util.HTPasswdAuth('htpasswd'),
}

#c['status'].append(
#    MailNotifier(
#        fromaddr="buildbot@buildbot.berlin.freifunk.net",
#        mode="change"
#        )
#    )
